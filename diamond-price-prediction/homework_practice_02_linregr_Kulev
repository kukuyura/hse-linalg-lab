{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VJEZ8P61An7I"
      },
      "source": [
        "# Лабораторная работа 2\n",
        "\n",
        "## Линейная регрессия"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5kOKUEqSSU5j"
      },
      "source": [
        "## Часть 1: Приближаем функции\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y3OmO16EAn7M"
      },
      "source": [
        "### Метод наименьших квадратов: постановка задачи\n",
        "\n",
        "Рассмотрим систему уравнений $Xa = y$, в которой $a$ — столбец неизвестных. Её можно переписать в векторном виде\n",
        "$$x_1 a_1 + x_2 a_2 + \\ldots + x_k a_k = y,$$\n",
        "где $x_1,\\ldots,x_k$ — столбцы матрицы $X$. Таким образом, решить исходную систему означает найти линейную комбинацию векторов $x_1,\\ldots,x_k$, равную правой части. Но что делать, если такой линейной комбинации не существует? Геометрически это означает, что вектор $y$ не лежит в подпространстве $U = \\langle x_1,\\ldots, x_k\\rangle$. В этом случае мы можем найти *псевдорешение*: вектор коэффициентов $\\hat{a}$, для которого линейная комбинация $x_1 \\hat{a}_1 + x_2 \\hat{a}_2 + \\ldots + x_k \\hat{a}_k$ хоть и не равна в точности $y$, но является наилучшим приближением — то есть ближайшей к $y$ точкой $\\hat{y}$ подпространства $U$ (иными словами, ортогональной проекцией $y$ на это подпростанство). Итак, цель наших исканий можно сформулировать двумя эквивалентными способами:\n",
        "\n",
        "1. Найти вектор $\\hat{a}$, для которого длина разности $|X\\hat{a} - y|$ минимальна;\n",
        "2. Найти ортогональную проекцию $\\hat{y}$ вектора $y$ на подпространство $U$ и представить её в виде $X\\hat{a}$.\n",
        "\n",
        "Далее мы будем предполагать, что векторы $x_1,\\ldots,x_k$ линейно независимы (если нет, то сначала имеет смысл выделить максимальную линейно независимую подсистему).\n",
        "\n",
        "На лекциях было показано, что проекция вектора $y$ на подпространство $U = \\langle x_1,\\ldots, x_k\\rangle$, записывается в виде\n",
        "$$\\hat{y} = X\\left(X^TX\\right)^{-1}X^Ty,$$\n",
        "и, соответственно, искомый вектор $\\hat{a}$ равен\n",
        "$$\\hat{a} = \\left(X^TX\\right)^{-1}X^Ty.$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wbh4XI_BAn7P"
      },
      "source": [
        "### Задача линейной регрессии\n",
        "\n",
        "Начнём с примера. Допустим, вы хотите найти зависимость среднего балла S студента ФКН от его роста H, веса W, длины волос L и N — количества часов, которые он ежедневно посвящает учёбе. Представьте, что мы измерили все эти параметры для $n$ студентов и получили наборы значений: $S_1,\\ldots, S_n$, $H_1,\\ldots, H_n$ и так далее.\n",
        "\n",
        "Теперь мы хотим построить **модель**, т.е. определить алгоритм, который будет принимать на вход некоторый набор параметров (в данном случае это измеренные нами $H, W, L$ и $N$), и выдавать значение некоторой **целевой переменной** (в данном примере это $S$). Тут можно подбирать много разных умных моделей, но начать имеет смысл с самой простой, линейной:\n",
        "\n",
        "$$S = a_0 + a_1H + a_2W + a_3L + a_4N.$$\n",
        "\n",
        "Конечно, строгой линейной зависимости нет (иначе можно было бы радостно упразднить экзамены), но мы можем попробовать подобрать коэффициенты $a_0, a_1, a_2, a_3, a_4$, удовлетворяющие вот такому требованию:\n",
        "$$\\sum_{i=1}^n\\left(S_i - ( a_0 + a_1H_i + a_2W_i + a_3L_i + a_4N_i)\\right)^2 \\longrightarrow \\min$$\n",
        "Т.е. мы хотим, чтобы квадрат отклонения правой части от левой был поменьше для всех $n$ студентов. Введём несколько обозначений:\n",
        "$$X =\n",
        "\\begin{pmatrix}\n",
        "1 & H_1 & W_1 & L_1 & N_1\\\\\n",
        "1 & H_2 & W_2 & L_2 & N_2\\\\\n",
        "\\vdots & \\vdots & \\vdots & \\vdots & \\vdots \\\\\n",
        "1 & H_n & W_n & L_n & N_n\n",
        "\\end{pmatrix}, \\qquad a=\n",
        "\\begin{pmatrix}\n",
        "a_0\\\\ a_1\\\\ \\vdots\\\\ a_4\n",
        "\\end{pmatrix},\\qquad y=\n",
        "\\begin{pmatrix}\n",
        "S_1\\\\ S_2\\\\ \\vdots \\\\ S_n\n",
        "\\end{pmatrix}.$$\n",
        "\n",
        "Теперь наше требование выше можно переписать в таком виде:\n",
        "$$\n",
        "\\sum_{i=1}^n\\left(S_i - ( a_0 + a_1H_i + a_2W_i + a_3L_i + a_4N_i)\\right)^2 = |y - Xa|^2 \\longrightarrow \\min\n",
        "$$\n",
        "\n",
        "И теперь видно, что мы получили задачу на метод наименьших квадратов!\n",
        "Решая эту задачу с помощью уже известных формул, получаем оценки коэффициентов $\\hat{a}_i$ ($i = 1\\ldots,5$)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v76yazhJAn7R"
      },
      "source": [
        "Теперь проговорим общую постановку задачи линейной регрессии. У нас есть $k$ переменных $x_1,\\ldots,x_k$ (\"регрессоров\"), через которые мы хотим выразить \"объясняемую переменную\" $y$:\n",
        "$$y = a_1x_1 + a_2x_2 + \\ldots + a_kx_k$$\n",
        "Значения всех переменных мы измерили $n$ раз (у $n$ различных объектов,  в $n$ различных моментов времени - это зависит от задачи). Подставим эти данные в предыдущее равенство:\n",
        "$$\\begin{pmatrix}\n",
        "y_1\\\\ y_2 \\\\ \\vdots \\\\ y_n\n",
        "\\end{pmatrix} = \n",
        "a_1\\begin{pmatrix}\n",
        "x_{11} \\\\ x_{21} \\\\ \\vdots \\\\ x_{n1} \\end{pmatrix} + a_2\\begin{pmatrix}\n",
        "x_{12} \\\\ x_{22} \\\\ \\vdots \\\\ x_{n2} \\end{pmatrix} + \\ldots + a_k\\begin{pmatrix}\n",
        "x_{1k} \\\\ x_{2k} \\\\ \\vdots \\\\ x_{nk} \\end{pmatrix}$$\n",
        "(здесь $x_{ij}$ - это значение $j$-го признака на $i$-м измерении). Это удобно переписать в матричном виде:\n",
        "$$\\begin{pmatrix}\n",
        "x_{11} & x_{12} & \\ldots & x_{1k}\\\\\n",
        "x_{21} & x_{22} & \\ldots & x_{2k}\\\\\n",
        "\\dots & \\dots & \\dots & \\dots\\\\\n",
        "x_{n1} & x_{n2} & \\ldots & x_{nk}\n",
        "\\end{pmatrix} \\cdot\n",
        "\\begin{pmatrix}\n",
        "a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_k\n",
        "\\end{pmatrix} = \n",
        "\\begin{pmatrix}\n",
        "y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n\n",
        "\\end{pmatrix}$$\n",
        "или коротко $Xa = y$. Поскольку на практике эта система уравнений зачастую не имеет решения (ибо зависимости в жизни редко бывают действительно линейными), методом наименьших квадратов ищется псевдорешение."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kDX5t_BxAn7T"
      },
      "source": [
        "### Оценка качества. Обучение и тест \n",
        "\n",
        "После того, как вы построили регрессию и получили какую-то зависимость объясняемой переменной от регрессоров, настаёт время оценить качество регрессии. Есть много разных функционалов качества; мы пока будем говорить только о самом простом и очевидном из них: о среднеквадратичной ошибке (mean square error). Она равна\n",
        "$$\\frac1{n}|X\\hat{a} - y|^2 = \\frac1{n}\\sum_{i=1}^n\\left(\\hat{a}_1x_{i1} + \\hat{a}_2x_{i2} + \\ldots + \\hat{a}_kx_{ik} - y_i\\right)^2$$\n",
        "\n",
        "В целом, хочется искать модели с наименьшей mean square error на имеющихся данных. Однако слишком фанатичная гонка за минимизацией ошибки может привести к печальным последствиям, в чём Вам предстоит убедиться в ходе выполнения этой лабораторной.\n",
        "\n",
        "Чтобы не попадать в эту ловушку, данные обычно делят на обучающие (по которым строят модель и оценивают коэффициенты) и тестовые. Лучшей стоит счесть ту модель, для которой значение функционала качества будет меньше."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CMrD0HArAn7T"
      },
      "source": [
        "### Правила оформления графиков\n",
        "При работе с данными часто неудобно делать какие-то выводы, если смотреть на таблицу и числа в частности, поэтому важно уметь визуализировать данные. \n",
        "\n",
        "У matplotlib, конечно же, есть [документация](https://matplotlib.org/users/index.html) с большим количеством [примеров](https://matplotlib.org/examples/), но для начала достаточно знать про несколько основных типов графиков:\n",
        "- plot — обычный поточечный график, которым можно изображать кривые или отдельные точки;\n",
        "- hist — гистограмма, показывающая распределение некоторой величины;\n",
        "- scatter — график, показывающий взаимосвязь двух величин;\n",
        "- bar — столбцовый график, показывающий взаимосвязь количественной величины от категориальной.\n",
        "\n",
        "Ещё одна билиотека для визуализации: [seaborn](https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html). Это надстройка над matplotlib, иногда удобнее и красивее делать визуализации через неё. \n",
        "\n",
        "При выполнении этой лабораторной Вы столкнётесь с необходимостью рисовать большое количество графиков. Не забывайте про базовые принципы построения приличных графиков:\n",
        "- оси должны быть подписаны, причём не слишком мелко;\n",
        "- у графика должно быть название;\n",
        "- если изображено несколько графиков, то необходима поясняющая легенда;\n",
        "- для точек из разных выборок необходимо использовать разные цвета;\n",
        "- все линии на графиках должны быть чётко видны (нет похожих цветов или цветов, сливающихся с фоном);\n",
        "- если отображена величина, имеющая очевидный диапазон значений (например, проценты могут быть от 0 до 100), то желательно масштабировать ось на весь диапазон значений (исключением является случай, когда вам необходимо показать малое отличие, которое незаметно в таких масштабах).\n",
        "\n",
        "Помните, что проверяющий имеет право снизить оценку за неопрятные графики."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Ivj-lm0An7U"
      },
      "source": [
        "### Формат сдачи\n",
        "Задания сдаются через систему Anytask. Инвайт можно найти на странице курса. Присылать необходимо ноутбук с выполненным заданием. Сам ноутбук называйте в формате homework-practice-02-linregr-Username.ipynb, где Username — Ваша фамилия."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sgYTlfJlAn7W"
      },
      "source": [
        "### Задание 1. Метод наименьших квадратов (3.1 баллов)\n",
        "\n",
        "**ВАЖНО! В этом задании вам нельзя использовать циклы (в том числе рекурсии, генераторы и конструкции вида map/reduce), кроме цикла в задании 1.5, который мы вам оставили. За наличие цикла в вашем коде мы поставим вам не более половины от стоимости задания.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_HVV2__An7W"
      },
      "source": [
        "Скачайте файлы ``train.txt`` и ``test.txt``. Каждый из файлов содержит два столбца чисел, разделённых пробелами: в первом — некоторое число точек (значения аргумента $x$), во втором — значения некоторой функции $y = f(x)$ в этих точках, искажённые случайным шумом. Функцию $f$ мы вам не скажем. Ваша задача — по данным из файла ``train.txt`` (будем называть их обучающей выборкой) подобрать функцию $y = g(x)$, пристойно приближающую неизвестную вам зависимость."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qhI6CxL0An7Y"
      },
      "source": [
        "Загрузим обучающие и тестовые данные (из файла ``test.txt``)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "id": "ca7tXdbiAn7Z"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from os.path import join\n",
        "\n",
        "PATH = \"./\" ### Вставить заглушку (не забудьте ввести правильный путь!)\n",
        "\n",
        "data_train = np.loadtxt(join(PATH, \"train.txt\"), delimiter=',')\n",
        "data_test = np.loadtxt(join(PATH, \"test.txt\"), delimiter=',')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k3GshOvnAn7b"
      },
      "source": [
        "**0. [0 баллов]** Разделим значения $x$ и $y$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "collapsed": true,
        "id": "1BIIDVGjAn7b"
      },
      "outputs": [],
      "source": [
        "X_train = data_train[:,0]\n",
        "y_train = data_train[:,1]\n",
        "X_test = data_test[:,0]\n",
        "y_test = data_test[:,1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PRLl0nkWAn7c"
      },
      "source": [
        "**1. [0,15 балла]** Найдите с помощью метода наименьших квадратов линейную функцию $y = kx + b$, наилучшим образом приближающую неизвестную зависимость. Полезные функции: ``numpy.ones(n)`` для создания массива из единиц длины $n$ и ``numpy.concatenate((А, В), axis=1)`` для слияния двух матриц по столбцам (пара ``А`` и ``В`` превращается в матрицу ``[A B]``). Напечатайте этот многочлен в виде $kx+b$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qTMuTy7IAn7d",
        "outputId": "7716188e-ccd6-4762-91e1-7ac5fb53266a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y = 4.048356078106742 x + 2.453932233062655\n"
          ]
        }
      ],
      "source": [
        "n = X_train.shape[0]\n",
        "X = X_train.reshape((n, 1))\n",
        "y = y_train.reshape((n, 1))\n",
        "X = np.concatenate((X, np.ones((n, 1))), axis=1)\n",
        "a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "k = a[0][0]\n",
        "b = a[1][0]\n",
        "print(f\"y = {k} x + {b}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bnburua6An7e"
      },
      "source": [
        "**2. [0,15 балла]** Нарисуйте на плоскости точки $(x_i, y_i)$ из обеих выборок и полученную линейную функцию."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Um_XtCIRAn7e",
        "outputId": "6924a47d-b20f-48d3-a315-f3408d269a0d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "X_approx = np.array([min(X_train.min(), X_test.min()), \n",
        "                     max(X_train.max(), X_test.max())])\n",
        "y_approx = np.array([k * X_approx[0] + b, k * X_approx[1] + b])\n",
        "plt.plot(X_train, y_train, 'bo', label=\"train\")\n",
        "plt.plot(X_test, y_test, 'go', label=\"test\")\n",
        "plt.plot(X_approx, y_approx, '-r', label=\"approx line\")\n",
        "plt.legend()\n",
        "plt.title('Приближение линиейной функцией')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "crzpARViAn7f"
      },
      "source": [
        "**3. [0,4 балла]** Глядя на данные, подумайте, многочленом какой степени можно было бы лучше всего приблизить эту функцию с точки зрения минимизации среднеквадратичной ошибки на обучающей выборке. Найдите этот многочлен и сохраните его коэффициенты в массив `poly_coef` (от младшего члена к старшему). Обязательно обоснуйте выбор степени многочлена."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W7FF-HtR0e1H",
        "outputId": "7a754268-67e3-4015-be71-a43d42a08fc8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "23\n"
          ]
        }
      ],
      "source": [
        "print(n)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TajuVPTWoE7U"
      },
      "source": [
        "Можно добиться нулевой среднеквадратичной ошибки, если построить интерполяционный многочлен Лагранжа степени не более $n - 1 = 22$, т.к. он пройдет через все точки"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "_31sqXCpxljw"
      },
      "outputs": [],
      "source": [
        "from scipy.interpolate import lagrange\n",
        "poly_coef = np.flip(lagrange(X_train, y_train).coef)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bVlu8GtRAn7h"
      },
      "source": [
        "**4. [0,15 балла]** Нарисуйте его график на одном чертеже вместе с точками $(x_i, y_i)$ из обеих выборок. Удалось ли графику пройти через все точки из выборки? Попробуйте объяснить, почему?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "2EjDMWVQAn7i",
        "outputId": "da43839e-520f-4951-d9c1-13248221fd3b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "p = poly_coef.shape[0]\n",
        "X_approx = np.arange(min(X_train.min(), X_test.min()), \n",
        "                     max(X_train.max(), X_test.max()), 0.01)\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coef.reshape((p, 1))\n",
        "plt.plot(X_train, y_train, 'bo', label=\"train\")\n",
        "plt.plot(X_test, y_test, 'go', label=\"test\")\n",
        "plt.plot(X_approx, y_approx, '-r', label=\"Lagrange\")\n",
        "plt.legend()\n",
        "plt.title('Приближение многочленом Лагранжа')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.ylim([-3, 8])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RJgJQ8aR1Fdh"
      },
      "source": [
        "График действительно прошел через все точки из обучающей выборки (т.к. это многочлен Лагранжа), но нет никакой связи с точками из тестовой выборки"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mlVLDqILAn7j"
      },
      "source": [
        "**5. [0,5 балла]** Для $k = 1,2,3,\\ldots,10$ найдите многочлен $\\hat{f}_k$ степени $k$, наилучшим образом приближающий неизвестную зависимость. Сохраните найденные коэффициенты многочленов в матрицу `poly_coefs` (коэффициенты многочлена степени $j$ должны быть сохранены в $j$-й строке матрицы от младшего члена к старшему)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "_kz4i82kAn7j",
        "outputId": "786aa956-3473-4cf9-faf9-2f036ea9cbf1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  import sys\n"
          ]
        }
      ],
      "source": [
        "poly_coefs = []\n",
        "for k in range(10):\n",
        "    X = X_train.reshape(n)\n",
        "    X = np.vander(X, k + 2)\n",
        "    a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "    poly_coefs.append(np.flip(a[:,0]))\n",
        "poly_coefs = np.array(poly_coefs)\n",
        "# Простая проверка, что матрица poly_coefs имеет столько строк, сколько нужно\n",
        "assert poly_coefs.shape[0] == 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XZm2UpUEAn7k"
      },
      "source": [
        "**6. [0,6 балл]** Для каждого из многочленов из задания 1.5, а также для многочлена из задания 1.4 найдите среднеквадратическую ошибку на обучающих данных и на тестовых данных: $\\frac1{n}\\sum_{i=1}^n\\left( \\hat{f}_k(x_i) - y_i \\right)^2$. Полученные значения ошибок сохраните в матрицу `errors` высоты 11 и ширины 2. В первом столбце матрицы должны стоять значения ошибок на тренировочных данных, во втором --- на тестовых. В первых 10 строках матрицы должны стоять значения ошибок для многочленов соответствующих степений из задания 1.5, в 11-й строке --- значение ошибки для многочлена из задания 1.4."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "nERVlRnnIEPC"
      },
      "outputs": [],
      "source": [
        "def error(f, X_local, y_local):\n",
        "    poly = np.poly1d(np.flip(f))\n",
        "    err = np.polyval(poly, X_local) - y_local\n",
        "    return np.sum(err * err) / X_local.shape[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "byyH4arFAn7k",
        "outputId": "ab82a5d1-163b-40d3-9424-b1a473dee686"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[7.00912588e-01 1.64930169e+00]\n",
            " [6.91992919e-01 1.56859711e+00]\n",
            " [6.53662070e-01 1.48196170e+00]\n",
            " [4.52989800e-01 2.25266387e+00]\n",
            " [3.69973832e-01 2.41600793e+00]\n",
            " [3.69614394e-01 2.49195289e+00]\n",
            " [3.54844465e-01 3.18560667e+00]\n",
            " [3.52453365e-01 3.59296147e+00]\n",
            " [3.38277875e-01 5.26186318e+00]\n",
            " [3.32784411e-01 7.99284845e+00]\n",
            " [3.61387213e-10 6.65769422e+14]]\n"
          ]
        }
      ],
      "source": [
        "errors = np.array([[error(poly_coefs[0], X_train, y_train), \n",
        "                    error(poly_coefs[0], X_test, y_test)],\n",
        "                   [error(poly_coefs[1], X_train, y_train), \n",
        "                    error(poly_coefs[1], X_test, y_test)],\n",
        "                   [error(poly_coefs[2], X_train, y_train), \n",
        "                    error(poly_coefs[2], X_test, y_test)],\n",
        "                   [error(poly_coefs[3], X_train, y_train), \n",
        "                    error(poly_coefs[3], X_test, y_test)],\n",
        "                   [error(poly_coefs[4], X_train, y_train), \n",
        "                    error(poly_coefs[4], X_test, y_test)],\n",
        "                   [error(poly_coefs[5], X_train, y_train), \n",
        "                    error(poly_coefs[5], X_test, y_test)],\n",
        "                   [error(poly_coefs[6], X_train, y_train), \n",
        "                    error(poly_coefs[6], X_test, y_test)],\n",
        "                   [error(poly_coefs[7], X_train, y_train), \n",
        "                    error(poly_coefs[7], X_test, y_test)],\n",
        "                   [error(poly_coefs[8], X_train, y_train), \n",
        "                    error(poly_coefs[8], X_test, y_test)],\n",
        "                   [error(poly_coefs[9], X_train, y_train), \n",
        "                    error(poly_coefs[9], X_test, y_test)],\n",
        "                   [error(poly_coef, X_train, y_train), \n",
        "                    error(poly_coef, X_test, y_test)]])\n",
        "print(errors)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VKns2ndWAn7l"
      },
      "source": [
        "**7. [0,5 балла]** Для $k = 1,2,3,4,6$ нарисуйте графики полученных многочленов на одном чертеже вместе с точками $(x_i, y_i)$ из обеих выборок (возможно, график стоит сделать побольше; это делается командой `plt.figure(figsize=(width, height))`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "Vwt574k1An7m",
        "outputId": "b131cbca-44c1-4e8b-8ff2-06fad036056c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1008x1008 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(14, 14))\n",
        "plt.plot(X_train, y_train, 'bo', label=\"train\")\n",
        "plt.plot(X_test, y_test, 'go', label=\"test\")\n",
        "X_approx = np.arange(min(X_train.min(), X_test.min()), \n",
        "                     max(X_train.max(), X_test.max()), 0.01)\n",
        "\n",
        "p = poly_coefs[0].shape[0]\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coefs[0].reshape((p, 1))\n",
        "plt.plot(X_approx, y_approx, '-r', label=\"k = 1\")\n",
        "\n",
        "p = poly_coefs[1].shape[0]\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coefs[1].reshape((p, 1))\n",
        "plt.plot(X_approx, y_approx, '-c', label=\"k = 2\")\n",
        "\n",
        "p = poly_coefs[2].shape[0]\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coefs[2].reshape((p, 1))\n",
        "plt.plot(X_approx, y_approx, '-m', label=\"k = 3\")\n",
        "\n",
        "p = poly_coefs[3].shape[0]\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coefs[3].reshape((p, 1))\n",
        "plt.plot(X_approx, y_approx, '-y', label=\"k = 4\")\n",
        "\n",
        "p = poly_coefs[5].shape[0]\n",
        "y_approx = np.vander(X_approx, p, increasing=True) @ poly_coefs[5].reshape((p, 1))\n",
        "plt.plot(X_approx, y_approx, '-k', label=\"k = 6\")\n",
        "\n",
        "plt.legend()\n",
        "plt.title('Приближение разными многочленами')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.ylim([-3, 8])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YXMClHOOAn7n"
      },
      "source": [
        "**8. [0,65 балла]** Что происходит с ошибкой на тестовых данных при росте степени многочлена? Казалось бы, чем больше степень, тем более сложным будет многочлен и тем лучше он будет приближать нашу функцию. Подтверждают ли это ваши наблюдения? Как вам кажется, чем объясняется поведение ошибки на тестовых данных при $k = 10$? Как называется наблюдаемый вами эффект?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "SqSC-yUCP7xQ",
        "outputId": "92d3a627-2445-4503-8699-7357dec7ed63"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(np.array(list(range(1, 11))), errors[:,1][:10], '-r')\n",
        "plt.title('Зависимость MSE от k')\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('MSE')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-6rGUQMqAn7n"
      },
      "source": [
        "**Ответ:** если построить график зависимости ошибки от $k$, то видно, что она даже не монотонная, в частности, ее минимум находится в точке 3. Более того, начиная с какого-то $k$, ошибка только растет с увеличением $k$ (на $k = 22$ уже порядка $10^{14}$, на графике этого нет). Скорее всего, это связанно с тем, что матрица $X$, использованная в вычислениях, состоит из очень маленьких чисел на больших $k$, значит, $\\left(X^TX\\right)^{-1}X^Ty$, наоборот - из очень больших, из-за чего возникают сильные колебания значений многочлена при смещении аргумента. Данный эффект называется **переобучение**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iwhYglpqSgh1"
      },
      "source": [
        "## Часть 2: Обучаем машины"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KFN99QhUAn7o"
      },
      "source": [
        "### Задание 2. Линейная регрессия (3 балла)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EIPGe5d0JSgq"
      },
      "source": [
        "В этом задании вам предстоит заняться предсказанием цен на алмазы. Скачайте файл `diamonds_features.csv`, содержащий данные, с которыми вам предстоит работать. Запустите следующую ячейку:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8_G9QdO6PdP4",
        "outputId": "4a20f08d-943b-47ee-a2af-c6334236f319"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[['0.8' 'Ideal' 'F' 'VS1' '62.4' '55.0' '5.92' '5.88' '3.68' '3884']\n",
            " ['0.91' 'Premium' 'F' 'SI2' '61.4' '60.0' '6.23' '6.21' '3.82' '3618']\n",
            " ['1.28' 'Premium' 'I' 'VS2' '61.7' '60.0' '7.05' '6.95' '4.32' '6762']\n",
            " ['0.41' 'Very Good' 'F' 'SI1' '61.9' '55.0' '4.78' '4.81' '2.97' '769']\n",
            " ['1.07' 'Premium' 'F' 'SI2' '61.8' '59.0' '6.53' '6.57' '4.05' '4560']]\n"
          ]
        }
      ],
      "source": [
        "data = np.loadtxt(\"diamonds_features.csv\", delimiter=\",\", dtype=\"str\")[1:, :]\n",
        "print(data[:5, :])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghn2xvL5P8BK"
      },
      "source": [
        "Мы вывели для вас первые 5 строчек данных. Описания значений в колонках вы можете найти в файле `diamonds_descriptions.txt`.\n",
        "\n",
        "Глобально в этом задании вам предстоит научиться строить модель линейной регрессии для предсказания цены алмаза по его признакам. Данные устроены таким образом, что в каждой строчке располагаются признаки, описывающие объект (алмаз), а в каждой фиксированной колонке --- всевозможные значения конкретного признака для всех объектов в данных."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fJEFOEpJAn7p"
      },
      "source": [
        "**0. [0 баллов]** Разделите выборку на обучающую и тестовую. Делать это лучше случайным образом (ведь вы не знаете, как создатели датасета упорядочили объекты); рекомендуем вам для этого функцию [sklearn.model_selection.train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) с параметром `test_size=0.3`. Обязательно зафиксируйте параметр `random_state`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "RoFzvGRBAn7q"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(data[:,:-1], \n",
        "                                                    data[:,-1], \n",
        "                                                    test_size=0.3, \n",
        "                                                    random_state=5)\n",
        "n = X_train.shape[0]\n",
        "n_test = X_test.shape[0]\n",
        "y_train = y_train.astype(float).reshape((n, 1))\n",
        "y_test = y_test.astype(float).reshape((n_test, 1))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dVO-0MsaTXXT"
      },
      "source": [
        "Теперь у вас есть две выборки, каждая из которых содержит случайное подмножество наших данных. Обучающую выборку мы в дальнейшем будем использовать для обучения модели линейной регрессии, а тестовую, соответственно, для теста.\n",
        "\n",
        "**ВАЖНО: за обучение модели на тестовой выборке будем ставить 0 за весь пункт!**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JEQLiBg-_zfK"
      },
      "source": [
        "### Работаем с числовыми данными"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bHSfXGDeC0b1"
      },
      "source": [
        "Сейчас ваши данные содержат как привычные вам числовые признаки, описывающие объект, так и категориальные признаки, которые описывают принадлежность объекта к той или иной категории, и в данных представляются строками. Что делать с данными, которые представлены строками --- мы разберёмся чуть позже, а пока давайте забудем, что они у нас есть, и будем работать только с числовыми."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KGGUh0UBEHSG"
      },
      "source": [
        "**0,5. [0 баллов]** Заполните переменные `numeric_features` и `categorical_features` индексами столбцов в данных, содержащих числовые и категориальные признаки соответственно. После этого можно проверить, что массив `data[:, numeric_features]` содержит только числовые данные."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kZWCocxzE-dv",
        "outputId": "ac449065-fea4-4792-d759-ee3b677fda36"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[['0.8' '62.4' '55.0' '5.92' '5.88' '3.68']\n",
            " ['0.91' '61.4' '60.0' '6.23' '6.21' '3.82']\n",
            " ['1.28' '61.7' '60.0' '7.05' '6.95' '4.32']\n",
            " ...\n",
            " ['0.31' '61.4' '56.0' '4.38' '4.41' '2.7']\n",
            " ['0.36' '62.0' '59.0' '4.56' '4.51' '2.81']\n",
            " ['0.31' '59.0' '62.0' '4.41' '4.43' '2.61']]\n"
          ]
        }
      ],
      "source": [
        "numeric_features = [0, 4, 5, 6, 7, 8]\n",
        "categorical_features = [1, 2, 3]\n",
        "print(data[:, numeric_features])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fiqc6nBwFVpP"
      },
      "source": [
        "**1. [0,3 баллов]** Решите задачу линейной регрессии для предсказания цены алмаза по его числовым признакам (не забудьте, что линейная модель должна также содержать свободный от признаков член) и протестируйте ваше решение на тестовых данных. Выведите полученные регрессионные коэффициенты для каждого признака. Попробуйте проинтерпретировать полученные коэффициенты: сравните их друг с другом, посмотрите на их знаки и на абсолютную величину и попробуйте на основе этого придать им житейский смысл. Согласуется ли построенная интерпретация модели с вашими представлениями о жизни? \n",
        "\n",
        "*Примечание: обратите внимание, сейчас все данные у вас хранятся в строковом виде. Чтобы работать с ними как с числами, необоходимо явно привести их к типу float. В NumPy для этого есть специальная удобная команда astype.*"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error"
      ],
      "metadata": {
        "id": "4QxkKypsqwNl"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ModelBased:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((X[:, numeric_features].astype(float), \n",
        "                    np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelBased(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))\n",
        "print(model.a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuoxAnnJq4Y_",
        "outputId": "85c29f20-ad9a-4dd6-d504-1faf51516d64"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2140144.980271212\n",
            "[[ 1.08512972e+04]\n",
            " [-2.34236528e+02]\n",
            " [-1.02923677e+02]\n",
            " [-1.49905811e+03]\n",
            " [-4.51117124e+00]\n",
            " [ 3.64381146e+02]\n",
            " [ 2.29847340e+04]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Se87BnStIAOK"
      },
      "source": [
        "Интерпретация модели здесь: Коэффициенты получились довольно большие, некоторые отрицательные. Причем первый (соотетствующий признаку \"carat\") заметно больше остальных, что, в целом, согласуется с моими представлениями о жизни"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6uGLZR-0TxaP"
      },
      "source": [
        "Если вы всё сделали правильно, у вас должны были получиться довольно большие по абсолютной величине коэффициенты."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "58iMlV0TUHHz"
      },
      "source": [
        "**2. [0,15 баллов]** Попробуйте объяснить, почему ситуация, когда модель имеет большие по модулю коэффиценты, нежелательна?\n",
        "\n",
        "Подсказка: Вы можете попытаться проиллюстрировать свои рассуждения, искусственно описав с помощью исследуемых признаков два алмаза, которые по вашему мнению должны иметь одинаковую цену, и проверить, выдаст ли построенная модель близкие предсказания на этих объектах."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a3oKgoUjWiem"
      },
      "source": [
        "Ваше обоснование здесь: возникают резкие колебания целевой переменной даже на множестве алмазов со схожими признаками."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycsEn6t9nwLB"
      },
      "source": [
        "**3. [0.2 баллов]** Нарисуйте гистограмму, характеризующую распределение объясняемой переменной в обучающей выборке. На такой диаграмме по оси `x` должны быть сгруппированные значения объясняемой переменной, а по оси `y` --- количество объектов выборки с таким значением. Столбцов на вашем графике должно быть не менее 50."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "itrJbGIl-I9Q",
        "outputId": "418dd0a0-6e81-451c-eaf7-98d6034be3cc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.hist(y_train, 50)\n",
        "plt.title('Распределение цены')\n",
        "plt.xlabel('Значение')\n",
        "plt.ylabel('Кол-во')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SEvOIN0DQyhZ"
      },
      "source": [
        "В левой части гистограммы располагаются небольшие значения целевой переменной, и объектов с таким значением в выборке довольно много (не забываем, что у нас тут не абстрактная математика в вакууме, мы тут цену алмазов предсказываем!); с увеличением значения таргета (целевой переменной) количество соответствующих объектов в выборке убывает. Сначала число объектов убывает довольно стремительно, но с некоторого момента разница в высоте между соседними столбцами уже почти незаметна. Такое явление называется \"распределение с тяжёлым хвостом\", и оно не очень желательно при построении модели."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PO37Qg7BTyqw"
      },
      "source": [
        "Попробуем избавиться от тяжёлого хвоста. Для этого нужно применить к таргету какую-нибудь медленнорастущую биективную функцию, например логарифм. \n",
        "\n",
        "<!-- Однако вспомним, что мы намеренно отмасштабировали таргет таким образом, чтобы среди его значений был 0, поэтому нужно придумать ещё какое-то преобразование, чтобы все значения целевой переменной попали в область определения логарифма. -->"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nXb63LraZaCL"
      },
      "source": [
        "**4. [0,25 баллов]** Прологарифмируйте целевую переменную и нарисуйте график распределения логарифмированного таргета. Сильно ли он отличается от предыдущего графика? Попробуйте объяснить, почему явление \"распределения с тяжёлым хвостом\" нежелательно при построении модели."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "AdgFVEebZwPT",
        "outputId": "a1dcbb4b-bceb-41da-fa9b-be226b22cd5b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.hist(np.log(y_train), 50)\n",
        "plt.title('Распределение цены после логарифмирования')\n",
        "plt.xlabel('Значение')\n",
        "plt.ylabel('Кол-во')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jrlDuorpEiU8"
      },
      "source": [
        "Ваше обоснование здесь: Так как меньших значений целевой переменной больше, модель будет неоправданно чаще выдавать маленькие ответы"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ty0T3kk5EiZ-"
      },
      "source": [
        "Снова обучите линейную модель, считая целевой переменной логарифмированный таргет. Помните, что чтобы протестировать полученную линейную модель, важно взять экспоненту от полученных предсказаний."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NbWAprptKEt0",
        "outputId": "2cbec3d2-0f5e-455c-b855-5bf050f104ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "37991389.33503783\n"
          ]
        }
      ],
      "source": [
        "class ModelLog:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        y = np.log(y)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((X[:, numeric_features].astype(float), \n",
        "                    np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return np.exp(X @ self.a)\n",
        "\n",
        "model = ModelLog(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NTSiJAeYE4EM"
      },
      "source": [
        "Удалось ли добиться лучшего качества?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zugn9a3fE8nb"
      },
      "source": [
        "Ответ: нет"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NHn1U5xJaPVH"
      },
      "source": [
        "### Работаем с категориальными признаками"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_CLrKbkJdK2b"
      },
      "source": [
        "До сих пор мы работали с данными, которые представляются числами. Однако часто в датасетах объекты описываются не только признаками, содержащими числа, но и строковыми признаками, определяющими принадлежность объекта к некоторой категории. Такие признаки называются категориальными. Важно не выкидывать их из модели, потому что часто они содержат довольно полезную информацию об объекте, которую хорошая модель должна обязательно учитывать.\n",
        "\n",
        "В этом разделе мы будем рассматривать только категориальные признаки, временно забыв про числовые.\n",
        "\n",
        "Естесственно, нам нужно придумать, как закодировать категориальные признаки числами. Есть довольно много подходов к такой кодировке, но мы рассмотрим два самых базовых. Первая мысль, которая приходит в голову такая: давайте занумеруем все категории фиксированного признака, и заменим их строковое представление соответствующим численным."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "Zh1vygTdAn7u"
      },
      "source": [
        "**5. [0,3 баллов]** Реализуйте описанную выше процедуру кодирования для всех категориальных признаков в выборке. Вы можете сделать это самостоятельно, а можете разобраться в классе `OrdinalEncoder` библиотеки `sklearn`. Обучите линейную модель на закодированных категориальных признаках и протестируйте. "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "ord = OrdinalEncoder(categories=[[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"],\n",
        "                                 ['J', 'I', 'H', 'G', 'F', 'E', 'D'],\n",
        "                                 ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF']])\n",
        "ord.fit(X_train[:,categorical_features])"
      ],
      "metadata": {
        "id": "pYcYRsqmuxBB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90d8dcf2-d684-4906-80d8-bf0f72e1f23b"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OrdinalEncoder(categories=[['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'],\n",
              "                           ['J', 'I', 'H', 'G', 'F', 'E', 'D'],\n",
              "                           ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1',\n",
              "                            'IF']])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FETTkQQGo_-P",
        "outputId": "32aee985-bc7f-4a86-9390-f8b30575779b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "18441644.15013574\n"
          ]
        }
      ],
      "source": [
        "class ModelOrd:\n",
        "    def __init__(self, X, y):\n",
        "        self.enc = ord\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = self.enc.transform(X[:, categorical_features])\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelOrd(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9O9CmAifpAJK"
      },
      "source": [
        "Подумайте, в чём потенциальные проблемы такого кодирования? (Подсказка: пусть изначально мы закодировали категорию A числом 1, а категорию B числом 2, а потом решили сделать наоборот: A <-> 2, B <-> 1. Подумайте, может ли измениться качество модели? А должно ли?)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZBkiDk5qqtSk"
      },
      "source": [
        "Ваше обоснование здесь: Если значений признака больше, чем 2, то замена A <-> 2, B <-> 1 действительно изменит ответ, т.к. при таком кодировании мы, по сути, сортируем признаки - и сортировка изменится. Но т.к. сами категории не меняются, мы не хотим, чтобы менялось качество модели.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3NY2scS1rAuU"
      },
      "source": [
        "Теперь давайте попробуем исправить недочёты такого способа кодирования категориальных признаков, придумав другой метод. Пусть некоторый признак имеет 4 различные категории: {A, B, C, D}. Заменим этот признак на 4 бинарных признака. Каждый из новых признаков будет являться индикатором одной из этих четырёх категорий: если некоторый объект имел категорию A, то после нашего кодирования значение признака, соответствующего категории А у этого объекта будет равно $1$, а значения оставшихся трёх признаков будут $0$. Небольшая иллюстрация: пусть так выглядела выборка до кодирования\n",
        "\n",
        "| Объект | Признак |\n",
        "| :----------:|:-:|\n",
        "| X | \"B\" |\n",
        "| Y | \"D\" |\n",
        "\n",
        "А так будет выглядеть после кодирования:\n",
        "\n",
        "| Объект | Признак == \"A\" | Признак == \"B\" | Признак == \"C\" | Признак == \"D\" |\n",
        "| :----------:|:-:|:-:|:-:|:-:|\n",
        "| X | 0 | 1 | 0 | 0 |\n",
        "| Y | 0 | 0 | 0 | 1 |\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U_VHgVKjtpwr"
      },
      "source": [
        "**6. [0,3 баллов]** Реализуйте описанную выше процедуру кодирования для всех категориальных признаков в выборке. Вы можете сделать это самостоятельно, а можете разобраться в классе `OneHotEncoder` библиотеки `sklearn`. Обучите линейную модель на закодированных категориальных признаках и протестируйте. "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "onehot = OneHotEncoder()\n",
        "onehot.fit(X_train[:, categorical_features])"
      ],
      "metadata": {
        "id": "1aiLMHYo9eEz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b5734d7-609f-4d3f-ef9a-121b27e66bfe"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneHotEncoder()"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Rrs69UxtyvR",
        "outputId": "d5ef6746-00bc-44af-b15b-1aec90825485"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "440004585.9624988\n"
          ]
        }
      ],
      "source": [
        "class ModelOneHot:\n",
        "    def __init__(self, X, y):\n",
        "        self.enc = onehot\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = self.enc.transform(X[:, categorical_features]).toarray()\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelOneHot(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rSOmE1iLty7n"
      },
      "source": [
        "Подумайте, в чём потенциальные проблемы такого кодирования? Какие недочёты прошлого метода кодирования исправляет предложенный способ? Какие недочёты есть у этого метода кодирования, которых нет у предыдущего? Который из двух методов выдаёт лучшее качество?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8grwr0ZBuIgq"
      },
      "source": [
        "Ваше обоснование здесь: OneHotEncoding позволяет кодировать все признаки симметрично, в отличие от предыдущего способа. При этом, он плохо работает с признаками, которые могут принимать много разных значений, т.к. возниакает много лишних переменных. В нашей задаче категориальные признаки действительно могут принимать много разных значений и OneHotEncoding работает хуже"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IBEMSIfuzoGJ"
      },
      "source": [
        "**7. [0,5 баллов]** Обучите линейную модель на всех данных, выполнив все необходимые преобразования. Постарайтесь добиться меньшей ошибки модели, чем во всех предыдущих заданиях."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HiXPa1UcQYje",
        "outputId": "d0cf350d-bc25-4930-b8ce-0b1bc361b564"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1408773.4064775798\n"
          ]
        }
      ],
      "source": [
        "class Model2:\n",
        "    def __init__(self, X, y):\n",
        "        self.enc = ord\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((self.enc.transform(X[:, categorical_features]),\n",
        "                            X[:, numeric_features].astype(float)), axis=1)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = Model2(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TOt1HIMMg0nu"
      },
      "source": [
        "### Feature engineering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ua8Hc_I2NdE8"
      },
      "source": [
        "#### Описание задания.\n",
        "\n",
        "В рамках этого задания вам предстоит улучшить модель и сделать предсказания на выборке из файла`diamonds_test.csv`, ответов к которой мы вам не дадим. Полученные предсказания вам нужно будет сдать в соревнование на сайте [kaggle.com](https://www.kaggle.com/c/hse-lab-linear-regression-21-22/overview). Подробнее о том, как сдавать предсказания, написано в конце раздела. Разумеется, чтобы иметь возможность сдать предсказания, вам нужно быть зарегистрированными на сайте. \n",
        "\n",
        "Оценка за задание рассчитывается исходя из ошибки полученных вами предсказаний и состоит из базовой части и бонусных баллов. Базовая часть оценки определяется следующими пороговыми значениями качества:\n",
        "\n",
        "*   MSE $\\leq 1950000$ ---- 0,25 балла\n",
        "*   MSE $\\leq 1370000$ ---- 0,5 балла\n",
        "*   MSE $\\leq 1280000$ ---- 0,75 балла\n",
        "*   MSE $\\leq 1170000$ ---- 1 балл\n",
        "\n",
        "Если ваша модель выдаёт качество сильно лучше, чем требуется в пороге на 1 балл, то вы можете претендовать на бонусные баллы, приняв участие в полноценном соревновании, смысл которого в том, чтобы получить качество как можно лучше (добиться наименьшей возможной ошибки). \n",
        "\n",
        "Если вы хотите поучаствовать, то просто продолжайте улучшать вашу модель и сдавать предсказания в соревнование. Бонусные баллы будут рассчитываться на основе ошибки полученных вами предсказаний и вашей позиции в лидерборде соревнования. Как именно будет рассчитываться оценка --- мы вам сообщим после завершения соревнования. Точно можем сказать, что наибольшее число баллов за задание получит только один студент --- тот, кто будет находиться на первой позиции в лидерборде на момент дедлайна. Человек на следующем месте уже получит немного меньше, следующий --- ещё меньше, и так далее. Каждый студент, качество предсказаний которого хоть немного лучше нашего порога на 1 балл, обязательно получит бонусные баллы.\n",
        "\n",
        "Чтобы подтвердить своё участие в соревновании, вам нужно будет сдать вашу модель вместе с лабораторной (лучше в отдельном файле, но можно её и прямо здесь написать).\n",
        "\n",
        "**Максимум бонусных баллов за задание: 3**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "esBQkVIY25zH"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ujFRVw0_focC"
      },
      "source": [
        "В оставшейся части данного раздела приводятся несколько заданий, за выполнение котороых вы не получите баллов. Эти задания даны специально, чтобы вы посмотрели, какие есть идеи для дальнейшего улучшения модели.  Разумеется, мы не требуем от вас, чтобы ваша финальная модель следовала указаниям из этих заданий --- вы можете вообще не выполнять ни одного задания отсюда, оцениваться будут только сданные вами предсказания.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qa714bBHg8_B"
      },
      "source": [
        "До сих пор мы только исследовали вопрос, как подготовить признаки из датасета, чтобы модель могла на их основе делать какие-то предсказания. При этом до сих пор мы никак не учитывали специфичность задачи: действительно, до этого момента нас интересовало только то, является ли признак числовым или категориальным, мы никак не учитывали физический смысл признаков. Однако часто датасеты предоставляют лишь самую общую информацию об объектах: признаки, которые легко измерить и запомнить. В таком случае при анализе данных нужно выдумывать собственные признаки, которые некоторым образом зависят от уже представленных в датасете признаков и **ни в коем случае не зависят от объясняемой переменной**.\n",
        "\n",
        "В общем случае процесс придумывания новых признаков довольно творческий. Есть, конечно, некоторые более-менее общие подходы, позволяющие улучшить качество модели путём добавления новых признаков, но часто аналитики придумывают признаки, основываясь не только на известных эвристиках, но и на собственном представлении о жизни.\n",
        "\n",
        "Давайте теперь поисследуем наши данные и подумаем, какие признаки можно добавить, чтобы улучшить модель."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bPhiy1IhiLow"
      },
      "source": [
        "**8.** Нарисуйте графики, отображающие зависимость цены алмаза от веса, длины, ширины и глубины (всего должно получиться 4 графика). Проинтерпретируйте наблюдаемую на них зависимость. Согласуется ли она с вашими представлениями о жизни?\n",
        "\n",
        "*Примечание: для изображения зависимости одной величины от другой лучше всего подходит график типа scatter.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "nQzcpqqNkGYq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a59c6399-3084-4f0a-bef9-2e61a3d698ef"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.scatter(X_train[:, 0].astype(float), y_train)\n",
        "plt.title(\"Зависимость цены от веса\")\n",
        "plt.ylabel(\"price\")\n",
        "plt.xlabel(\"carat\")\n",
        "plt.show()\n",
        "plt.scatter(X_train[:, 6].astype(float), y_train)\n",
        "plt.title(\"Зависимость цены от длины\")\n",
        "plt.ylabel(\"price\")\n",
        "plt.xlabel(\"x\")\n",
        "plt.show()\n",
        "plt.scatter(X_train[:, 7].astype(float), y_train)\n",
        "plt.title(\"Зависимость цены от ширины\")\n",
        "plt.ylabel(\"price\")\n",
        "plt.xlabel(\"y\")\n",
        "plt.show()\n",
        "plt.scatter(X_train[:, 8].astype(float), y_train)\n",
        "plt.title(\"Зависимость цены от глубины\")\n",
        "plt.ylabel(\"price\")\n",
        "plt.xlabel(\"z\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jd6J9SQlkGwZ"
      },
      "source": [
        "Подумайте, какую функцию можно применить к признакам, чтобы зависимость целевой переменной от них больше напоминала линейную?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hU63JZex0h_P"
      },
      "source": [
        "Ваше обоснование здесь: скорее всего, экспоненту"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1L7iSqah0mYd"
      },
      "source": [
        "**9.** На одном рисунке изобразите график зависимости целевой переменной от признака depth и график зависимости целевой переменной от признака table. Чтобы картинка получилась читаемой, сделайте графики полупрозрачными (параметр `alpha`). Что вы можете сказать о получившемся рисунке? Правда ли, что модели будет достаточно оставить только один из этих признаков? Убедитесь в этом, нарисовав аналогичные графики зависимости признаков depth и table от других числовых признаков.\n",
        "\n",
        "*Примечание: почитайте про plt.subplots, чтобы узнать, как красиво рисовать несколько графиков.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "UqTp9xWY28Av",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "cff7be73-1e9b-4d20-a8c6-c39188d0fba9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.scatter(X_train[:, 4].astype(float), y_train, c='r', alpha=0.01)\n",
        "plt.scatter(X_train[:, 5].astype(float), y_train, c='b', alpha=0.01)\n",
        "plt.title(\"Зависимость цены от depth и table\")\n",
        "plt.ylabel(\"price\")\n",
        "plt.xlabel(\"depth/table\")\n",
        "plt.show()\n",
        "\n",
        "plt.scatter(X_train[:, 4].astype(float), X_train[:, 0].astype(float), c='r', alpha=0.01)\n",
        "plt.scatter(X_train[:, 5].astype(float), X_train[:, 0].astype(float), c='b', alpha=0.01)\n",
        "plt.title(\"Зависимость веса от depth и table\")\n",
        "plt.ylabel(\"carat\")\n",
        "plt.xlabel(\"depth/table\")\n",
        "plt.show()\n",
        "\n",
        "plt.scatter(X_train[:, 4].astype(float), X_train[:, 6].astype(float), c='r', alpha=0.01)\n",
        "plt.scatter(X_train[:, 5].astype(float), X_train[:, 6].astype(float), c='b', alpha=0.01)\n",
        "plt.title(\"Зависимость длины от depth и table\")\n",
        "plt.ylabel(\"x\")\n",
        "plt.xlabel(\"depth/table\")\n",
        "plt.show()\n",
        "\n",
        "plt.scatter(X_train[:, 4].astype(float), X_train[:, 7].astype(float), c='r', alpha=0.01)\n",
        "plt.scatter(X_train[:, 5].astype(float), X_train[:, 7].astype(float), c='b', alpha=0.01)\n",
        "plt.title(\"Зависимость ширины от depth и table\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.xlabel(\"depth/table\")\n",
        "plt.show()\n",
        "\n",
        "plt.scatter(X_train[:, 4].astype(float), X_train[:, 8].astype(float), c='r', alpha=0.01)\n",
        "plt.scatter(X_train[:, 5].astype(float), X_train[:, 8].astype(float), c='b', alpha=0.01)\n",
        "plt.title(\"Зависимость глубины от depth и table\")\n",
        "plt.ylabel(\"z\")\n",
        "plt.xlabel(\"depth/table\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6kZjZ2Ww3YF0"
      },
      "source": [
        "Казалось бы, мы тут пытаемся придумать новые признаки, чтобы улучшить модель, зачем нам выбрасывать уже имеющиеся признаки? Дело в том, что если в выборке есть \"похожие\" в некотором смысле признаки, то модель, обученная на таких данных, может выдавать худший результат, чем если бы похожих признаков в выборке не было. Продемонстрируем это явление на практике."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5x3TzT7V4gDP"
      },
      "source": [
        "**10.** Обучите линейную модель, предсказывающую цену алмазов на признаках x, y, z из наших данных. Замерьте качество полученной линейной модели на тестовой выборке, после чего добавьте признак $\\tau = \\frac{x}{2} + 4y - z + 1$, и снова обучите линейную модель. Которая из моделей добилась лучшего качества?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "ktbNFzsz5gt9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "02eae9ea-51f0-482c-b8bc-a22584c5a72e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3354532.6487060473\n",
            "3365728.6313815783\n"
          ]
        }
      ],
      "source": [
        "class ModelXYZ:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = X[:,[6, 7, 8]].astype(float)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "class ModelXYZTau:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((X[:,[6, 7, 8]].astype(float),\n",
        "                            X[:,[6]].astype(float) / 2 + \n",
        "                            4 * X[:,[7]].astype(float) - \n",
        "                            X[:,[8]].astype(float) +\n",
        "                            np.ones((X.shape[0], 1))), axis=1)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelXYZ(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))\n",
        "model = ModelXYZTau(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RbZ4u40h_MyO"
      },
      "source": [
        "Объясните, почему наличие похожих признаков в выборке заметно ухудшает качество, выдаваемое линейной моделью?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gEINdpQy_XcA"
      },
      "source": [
        "Ваше обоснование здесь: ╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "argZX3YMCb6e"
      },
      "source": [
        "Итак, мы обсудили, исходя из каких соображений можно выбирать преобразования над имеющимися признаками и когда для модели может быть полезнее выкинуть некоторый признак из выборки, чем оставить его. Теперь давайте придумаем совсем новый признак. Для этого снова посмотрим на такие характеристики алмазов, как длина, ширина и глубина. Эти характеристики несомненно важны для предсказания цены алмазов, и все построенные нами модели находили какую-то закономерность, но теперь давайте мы попробуем их объединить в новом признаке `объём`. Для начала будем считать, что объём алмаза неплохо приближается объёмом параллелепипеда с такими же измерениями."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DtlMCLwEDhhG"
      },
      "source": [
        "**11.** Обучите линейную модель на 4 признаках: x, y, z, и объём параллелепипеда со сторонами (x, y, z). Сравните качество полученной модели с качеством, выдаваемым моделью, обученной на признаках x, y, z."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "5fgSn6IZELmT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6efac1ff-6764-41fd-95b6-a32a07bd5d3b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2242031.712728288\n"
          ]
        }
      ],
      "source": [
        "class ModelXYZV:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((X[:,[6, 7, 8]].astype(float),\n",
        "                            X[:,[6]].astype(float) * \n",
        "                            X[:,[7]].astype(float) *\n",
        "                            X[:,[8]].astype(float)), axis=1)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelXYZV(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6XuJr72iGBSy"
      },
      "source": [
        "Понятно, что алмазы редко выглядят как идеальные параллелепипеды (хотя, конечно, многое зависит от огранки), и чаще встречаются алмазы, форма которых скорее напоминает эллипсоид. Снова обучите линейную модель на 4 признаках: x, y, z и объём эллипсоида с осями (x, y, z). Сравните полученную модель с предыдущей. Сильно ли отличается качество у этих моделей? Объясните, почему так получилось?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "5ZzmZmNhIKDo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f82f6f26-02f3-42bc-f15c-70a756da620a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2242031.71272833\n"
          ]
        }
      ],
      "source": [
        "class ModelXYZEllipsoidV:\n",
        "    def __init__(self, X, y):\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((X[:,[6, 7, 8]].astype(float),\n",
        "                            X[:,[6]].astype(float) * \n",
        "                            X[:,[7]].astype(float) *\n",
        "                            X[:,[8]].astype(float) * 4 * np.pi / 3), axis=1)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelXYZEllipsoidV(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Качество абсолютно такое же, т.к. объемы отличаются в константу раз"
      ],
      "metadata": {
        "id": "Ph_lm3l1vFVp"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c7r5Je0uI6pj"
      },
      "source": [
        "Если вам стало интересно, можете попробовать обучить модель, аппроксимируя объём алмаза объёмом тетраэдра. Впрочем, если вы ответили на предыдущий вопрос, вы уже наверняка представляете, что получится. В любом случае мы не настаиваем =)\n",
        "\n",
        "Следующий трюк, который мы обсудим, --- это бинаризация признаков. Суть заключается в том, что мы берём некоторый признак из выборки и делаем из него несколько бинарных признаков (т.е. таких признаков, значения которых могут быть либо $0$, либо $1$). Частный случай бинаризации признаков мы уже разбирали, когда занимались кодированием категориальных признаков: тогда мы брали признак $P$, описывающий принадлежность объекта к одной из $N$ категорий ${A_1, \\ldots, A_N}$, и делали из него $N$ признаков вида $[P = A_1], [P = A_2], \\ldots [P = A_N]$.\n",
        "\n",
        "Однако это не единственный способ бинаризовать признаки. Допустим $P$ --- числовой признак, тогда мы, например, можем выбрать $k$ порогов ${t_1, \\ldots, t_k}$ и превратить признак $P$ в $k$ бинарных признаков $[P \\leq t_1], [t_1 < P \\leq t_2], \\ldots, [t_{k-1} < P \\leq t_k]$.\n",
        "\n",
        "Если же у нас есть два признака $P$ и $F$, мы можем применять булевы операции к их бинаризациям, например $[P < t_1 \\vee F > h_1], [t_2 < P \\leq t_3 \\wedge h_2 \\leq F \\leq h_3], [(P = t_4 \\vee F = h_4) \\wedge P \\leq t_5]$, и т.д.\n",
        "\n",
        "Давайте с помощью бинаризации выделим объекты, цена которых скорее всего будет высокой, и объекты, цена которых скорее всего будет низкой. Делать мы это будем на основе категориальных признаков (закодированных любым способом, однако если вы предпочитаете кодирование бинаризацией, т.е. второй способ, то при выполнении задания не забывайте, что признаки должны быть линейно независимы). Чтобы вы понимали, как именно категориальные признаки характеризуют алмазы, мы приложили вам картинку `categorical_descriptions`.\n",
        "\n",
        "![](https://lh3.google.com/u/0/d/1xzqbnwyOazKNiiJxNo_AUh7iUsTONC-0=w1920-h1090-iv1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ADOr1ZH6Y1OQ"
      },
      "source": [
        "**12.** Обучите линейную модель, предсказывающую цену алмазов на категориальных признаках из наших данных. Замерьте качество полученной линейной модели на тестовой выборке, после чего добавьте признаки, которые явно выделят алмазы, цена на которые скорее всего будет высокой, и алмазы, цена которых скорее всего будет низкой, и снова обучите линейную модель. Вы можете также добавить и свои признаки и использовать не только категориальные признаки (например, если вам захочется добавить признак \"у алмаза лучшая чистота И алмаз совершенно бесцветный И объём алмаза не меньше $t$\"). Удалось ли добиться прироста в качестве?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "7sxhbqDPZyfH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c0ec8d1-1931-4b67-9135-67213a97e4c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "18441644.15013574\n",
            "15533544.43718599\n"
          ]
        }
      ],
      "source": [
        "class ModelBi:\n",
        "    def __init__(self, X, y):\n",
        "        self.enc = ord\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = self.enc.transform(X[:, categorical_features])\n",
        "        X = np.concatenate((X, (X[:, [0]] >= 4).astype(np.int_) & (X[:, [1]] >= 1).astype(np.int_) & (X[:, [2]] >= 2).astype(np.int_)), axis=1)\n",
        "        X = np.concatenate((X, (X[:, [0]] <= 4).astype(np.int_) & (X[:, [1]] <= 2).astype(np.int_) & (X[:, [2]] <= 4).astype(np.int_)), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "model = ModelBi(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Да, удалось добиться лучшего качества (ModelOrd выдавала 18441644.15013574)"
      ],
      "metadata": {
        "id": "Nqrt4YqUFphq"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AbIbDwNci6Mf"
      },
      "source": [
        "#### Как сдавать предсказания?\n",
        "\n",
        "Передайте в написанную нами функцию `make_submission` ваши предсказания. Когда функция отработает, у вас в рабочей директории появится файл `submission.csv`, который вам и нужно сдать в соревнование."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "m4gv1RKjjtxA"
      },
      "outputs": [],
      "source": [
        "def make_submission(y_pred):\n",
        "  file = np.arange(1, len(y_pred) + 1)\n",
        "  file = file.reshape(-1, 1)\n",
        "  file = np.concatenate([file, y_pred.reshape(-1, 1).astype(float)], axis=1)\n",
        "  with open(\"submission.csv\", \"w\") as f:\n",
        "    f.write(\"id,price\\n\")\n",
        "    np.savetxt(f, file, delimiter=\",\", fmt=\"%d,%10.5f\")\n",
        "\n",
        "# пример вызова функции:\n",
        "make_submission(np.zeros(16182))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4aHgP-6qfl0D"
      },
      "source": [
        "### Задание 3. Регуляризация (3.9 баллов)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6RcCzJLjm8a6"
      },
      "source": [
        "Конечно, никто не гарантирует, что объясняемая переменная зависит от остальных характеристик именно линейно, поэтому мы можем неслабо улучшить модель, добавляя в неё нелинейные признаки на основе уже имеющихся. Один из наиболее распространённых подходов заключается в добавлении в выборку полиномиальных признаков некоторой фиксированной степени на основе уже имеющихся. Т.е., скажем, у нас есть признаки {P, F, G} и наша задача состоит в том, чтобы добавить в выборку полиномиальные признаки степени $2$ на основе имеющихся. Тогда мы добавим в выборку признаки\n",
        "\n",
        "$$\n",
        "P^2, F^2, G^2, PF, PG, FG.\n",
        "$$\n",
        "\n",
        "Аналогично для большего числа признаков и больших степеней.\n",
        "\n",
        "**1. [0,4 баллов]** Реализуйте функцию `add_polynomial_features`, принимающую массив признаков, и степень, и возвращающую полиномиальные признаки заданной степени."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "_lnytPeGnEFP"
      },
      "outputs": [],
      "source": [
        "def add_polynomial_features(features, degree):\n",
        "  \"\"\"\n",
        "    features: массив признаков\n",
        "    degree:   показатель степени\n",
        "  \"\"\"\n",
        "  if degree == 1:\n",
        "      return features\n",
        "  ret = np.array([])\n",
        "  ret = ret.reshape((0, features.shape[1]))\n",
        "  for i in range(len(features)):\n",
        "      ret = np.vstack((ret, add_polynomial_features(features[i:,:], degree - 1) * features[i]))\n",
        "  return ret\n",
        "\n",
        "# Пример: получаем полиномиальные признаки степени 2 на основе признаков x, y, z:\n",
        "poly_features = add_polynomial_features(data[:, [6, 7, 8]].astype(np.float64).T, 2)\n",
        "assert poly_features.shape[0] == 6 "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TqwGy6HEnX6W"
      },
      "source": [
        "Обучите линейную модель, добавив в выборку полиномиальные признаки степени $2$ от признаков carat и table. Сравните качество полученной модели с качеством модели из пункта 7 предыдущего задания."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MPI707WOn1op",
        "outputId": "478a4b8a-c31e-420e-fb40-fc982e89edf9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "784019.7622233519\n"
          ]
        }
      ],
      "source": [
        "class ModelPoly:\n",
        "    def __init__(self, X, y):\n",
        "        self.enc = ord\n",
        "        X = self.prepare(X)\n",
        "        y = np.log(y)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((self.enc.transform(X[:, categorical_features]), \n",
        "                            X[:, numeric_features].astype(float)), axis=1)\n",
        "        X = np.concatenate((X, add_polynomial_features(X[:, [3, 5]].T, 2).T), axis=1)\n",
        "        X = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return np.exp(np.clip(X @ self.a, 0, 10))\n",
        "\n",
        "model = ModelPoly(X_train, y_train)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mU28uyBIfyP4"
      },
      "source": [
        "Качество сильно выросло, ура :)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ihqwU4rvAKw"
      },
      "source": [
        "Итак, мы узнали, что в выборку можно добавлять полиномиальные признаки от уже имеющихся числовых признаков и, как правило, это приводит к существенному приросту качества. Возникает естественный вопрос: почему бы не свести задачу построения линейной модели к подбору степени полиномиальных признаков? Ведь наверняка можно найти такую степень, при которой модель будет выдавать наилучшее возможное качество? Давайте исследуем этот вопрос."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ug11Yg52v5WU"
      },
      "source": [
        "**2. [0,3 баллов]** В этом задании вам нужно обучить 6 линейных моделей на полиномиальных признаках степеней от 1 до 6 от уже имеющихся признаков (carat, x, y, z). Нарисуйте график зависимости качества модели на обучающей и тестовой выборке от степени полиномиальных признаков в логарифмической шкале. Прокомментируйте полученный график: ожидали ли вы такого эффекта? "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "JGvdh2Wmwwh_",
        "outputId": "bc7e4751-d826-46f1-c885-28f828bbdb0b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "class ModelPolyK:\n",
        "    def __init__(self, X, y, k):\n",
        "        self.k = k\n",
        "        X = self.prepare(X)\n",
        "        self.a = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = add_polynomial_features(X[:, [0, 6, 7, 8]].astype(float).T, self.k).T\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "train_values = []\n",
        "test_values = []\n",
        "for k in range(1, 7):\n",
        "    model = ModelPolyK(X_train, y_train, k)\n",
        "    train_values.append(mean_squared_error(model.predict(X_train), y_train))\n",
        "    test_values.append(mean_squared_error(model.predict(X_test), y_test))\n",
        "plt.plot(np.array(list(range(1, 7))), train_values, '-b', label=\"train\")\n",
        "plt.plot(np.array(list(range(1, 7))), test_values, '-g', label=\"test\")\n",
        "plt.title('Зависимость MSE от k')\n",
        "plt.yscale('log')\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('MSE')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Да, я ожидал, что возникнет переобучение"
      ],
      "metadata": {
        "id": "-4kL5MS4W9OM"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PKtmVN-Dww4h"
      },
      "source": [
        "Наблюдаемый вами эффект называется переобучением: ситуация, когда модель становится слишком зависимой от обучающей выборки. Действительно, в процессе обучения модели мы стараемся минимизировать ошибку именно на обучающей выборке, и совершенно неочевидно, почему обученная модель будет обобщаться на объекты, которых она раньше не видела.\n",
        "\n",
        "Когда мы начали добавлять в выборку полиномиальные признаки большой степени, модель стала настолько сложной, что обрела способность запомнить обучающую выборку вместо того, чтобы извлекать из неё какие-то закономерности. Как следствие, когда мы подали модели на вход выборку, отличную от обучающей, мы получили колоссальную ошибку.\n",
        "\n",
        "Ситуация, когда качество модели на обучающей выборке гораздо ниже качества на тестовой выборке, является самым явным симптомом переобучения, но не единственным. Часто в ситуации переобучения можно наблюдать необычайно большие по модулю коэффициенты модели.\n",
        "\n",
        "Есть много способов борьбы с этим злом. Один из них --- регуляризация. Сейчас мы рассмотрим одну из её разновидностей --- **L2-регуляризацию**. Идея в том, чтобы подправить матрицу $X^TX$, сделав её \"получше\". Например, это можно сделать, заменив её на $(X^TX + \\lambda E)$, где $\\lambda > 0$ --- некоторый скаляр. Пожертвовав точностью на обучающей выборке, мы тем не менее получаем численно более стабильное псевдорешение $a = (X^TX + \\lambda E)^{-1}X^Ty$ и снижаем эффект переобучения. *Гиперпараметр* $\\lambda$ нужно подбирать, и каких-то универсальных способов это делать нет, но зачастую можно его подобрать таким, чтобы ошибка на тестовой выборке падала.\n",
        "\n",
        "Однако есть некоторые правила, которых стоит придерживаться при подборе коэффициента регуляризации. Обычно в такой ситуации всю выборку делят на три части: обучающую, *валидационную* и тестовую. Сначала по валидационной подбирают значение гиперпараметра, потом по обучающей строят модель, а по тестовой оценивают её итоговое качество. Кроме того, подбирать $\\lambda$ нужно по логарифметической сетке, чтобы узнать оптимальный порядок величины."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KRr312xvz-Cx"
      },
      "source": [
        "**3. [0,1 балла]** Подумайте, почему не стоит подбирать коэффициент регуляризации по обучающей выборке? По тестовой выборке?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PjYAT3i-0GGX"
      },
      "source": [
        "Ваше обоснование здесь: Оптимальный коэффициент для обучающей выборки всегда равен 0. Тестовая выборка всегда нужна, чтобы оценить качество уже обученной модели, поэтому странно подбирать гиперпараметр, необходимый для обучения, по ней."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nQlJbhvH0SBD"
      },
      "source": [
        "**4. [0,3 балла]** Рассмотрим линейную можель с полиномиальными признаками степени $4$ от признаков (carat, x, y, z). Качество такой модели на обучающей выборке уже заметно лучше, чем качество на тестовой. Попробуем исправить эту ситуацию, применив $L2$-регуляризацию. Поделите вашу обучающую выборку на две части в соотношении $8:2$. Большую часть вы вновь объявите обучающей выборкой, а меньшую --- валидационной. Подберите гиперпараметр $\\lambda$ по логарифмической сетке таким образом, чтобы линейная модель с \"подправленной\" матрицей Грама $X^TX$ выдавала лучшее качество на валидационной выборке. Обучите линейную модель с подобранным параметром $\\lambda$ на обучающей выборке и протестируйте её на тестовых данных. Сделайте вывод: помогла ли нам регуляризация?\n",
        "\n",
        "*Примечание: np.logspace вам в помощь.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g5rBhgI93MXd",
        "outputId": "b1d2ae99-0de8-499c-b738-71518cf15333"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "434214976.95750433\n"
          ]
        }
      ],
      "source": [
        "class ModelL2K:\n",
        "    def __init__(self, X1, X2, y1, y2, k):\n",
        "        self.k = k\n",
        "        X1 = self.prepare(X1)\n",
        "        X2 = self.prepare(X2)\n",
        "        min_MSE, best_lambda = -1, -1\n",
        "        for curr_lambda in np.logspace(-10, 10, num=21):\n",
        "            curr_MSE = mean_squared_error(X2 @ \n",
        "                                          np.linalg.inv(X1.T @ X1 + curr_lambda * np.eye(X1.shape[1])) @ \n",
        "                                          X1.T @ y1, y2)\n",
        "            if min_MSE == -1 or curr_MSE < min_MSE:\n",
        "                min_MSE, best_lambda = curr_MSE, curr_lambda\n",
        "        self.a = np.linalg.inv(X1.T @ X1 + best_lambda * \n",
        "                               np.eye(X1.shape[1])) @ X1.T @ y1\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = add_polynomial_features(X[:, [0, 6, 7, 8]].astype(float).T, self.k).T\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return X @ self.a\n",
        "\n",
        "X_train_new, X_valid, y_train_new, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=12)\n",
        "model = ModelL2K(X_train_new, X_valid, y_train_new, y_valid, 4)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Да, регуляризация немного снизила ошибку"
      ],
      "metadata": {
        "id": "KFJIZfcVbYLI"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wFeo516Z4ckd"
      },
      "source": [
        "**5. [0,5 балла]** Повторите первое задание, но вместо 6 обычных линейных моделей обучите 6 регуляризованных линейных моделей. Для каждой модели вам нужно будет подобрать свой гиперпараметр $\\lambda$. Сравните полученный график с графиком из первого задания: для всякой ли степени мы смогли улучшить ситуацию? Как выдумаете, почему?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "fKPFiHrN4-xO",
        "outputId": "d8407704-4036-4c8d-a61a-3de5f249e023"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "train_values_new = []\n",
        "test_values_new = []\n",
        "for k in range(1, 7):\n",
        "    model = ModelL2K(X_train_new, X_valid, y_train_new, y_valid, k)\n",
        "    train_values_new.append(mean_squared_error(model.predict(X_train_new), y_train_new))\n",
        "    test_values_new.append(mean_squared_error(model.predict(X_test), y_test))\n",
        "plt.plot(np.array(list(range(1, 7))), train_values, '-b', label=\"train\")\n",
        "plt.plot(np.array(list(range(1, 7))), test_values, '-g', label=\"test\")\n",
        "plt.plot(np.array(list(range(1, 7))), train_values_new, '-m', label=\"train after reg.\")\n",
        "plt.plot(np.array(list(range(1, 7))), test_values_new, '-y', label=\"test after reg.\")\n",
        "plt.title('Зависимость MSE от k')\n",
        "plt.yscale('log')\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('MSE')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Получилось немного снизить переобучение; на $k = 5, 6$ это вышло не так хорошо, т.к. за счет уменьшения коэффициентов качество выросло также и на обучающей выборке"
      ],
      "metadata": {
        "id": "RnonSkKaWIYe"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IwzU99F75DPx"
      },
      "source": [
        "**6. [1,15 балла]** Пусть заданы $X\\in \\text{Mat}_{n \\times k}(\\mathbb{R})$, $\\lambda \\geqslant 0$, а также известно, что $\\text{rk}~X = k \\leqslant n$. Решите следующую задачу оптимизации:\n",
        "$$|Xa - y|^2 + \\lambda|a|^2\\rightarrow\\min\\limits_{a \\in \\mathbb{R}^k}.$$\n",
        "\n",
        "Заметим, что первое слагаемое --- это значение mean-square error (с точностью до домножения на некоторую константу) модели с коэффициентами $a = (a_1, \\ldots, a_k)$. Типичной задачей линейной регрессии является минимизация первого слагаемого по всем векторам $a$. Однако в данном случае кроме минимизации среднеквадратичной ошибки мы также добавляем условие, что при этом и веса модели должны быть как можно меньше. Действительно, мы уже убедились, что чем сложнее модель, тем меньше будет ошибка на обучающей выборке (а именно это ошибку мы и минимизируем в процессе обучения) и тем вероятнее модель будет иметь большие по модулю коэффициенты, а значит, и большое значение $|a|$. Добавляя второе слагаемое в рассматриваемый выше функционал, мы как бы задаём ограничение на абсолютную величину коэффициентов модели. При этом параметр $\\lambda$ явно будет указывать, насколько сильно мы будем штрафовать модель за большие коэффициенты. Заметим, что если $\\lambda = 0$, то мы получаем классическую задачу линейной регресии без регуляризации."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m0l8CtbO7uxo"
      },
      "source": [
        "Ваше решение здесь: \n",
        "\n",
        "$\\sum_i(\\sum_jx_{ij}a_j -y_i)^2 + \\lambda\\sum_ja_j^2 \\to min \\\\ \n",
        "\\frac{d}{da_m}(\\sum_i(\\sum_jx_{ij}a_j -y_i)^2 + \\lambda\\sum_ja_j^2) = 0\\\\\n",
        "\\sum_i(\\sum_jx_{ij}a_j -y_i)x_{im} + \\lambda a_m = 0 \\\\\n",
        "\\sum_i\\sum_jx_{ij}a_jx_{im} + \\lambda a_m = \\sum_ix_{im}y_i$\n",
        "\n",
        "Пусть $x_m$ - $m$-ый столбец $X$:\n",
        "\n",
        "$x_m^TXa + \\lambda a_m = x_m^Ty$\n",
        "\n",
        "Учитывая равенство для каждой координаты $m$, получаем:\n",
        "\n",
        "$X^TXa + \\lambda a = X^Ty\\\\\n",
        "(X^TX + \\lambda E)a = X^Ty\\\\\n",
        "a = (X^TX + \\lambda E)^{-1}X^Ty$\n",
        "\n",
        "Обратная матрица существует, т.к. собственные значения $X^TX$ неотрицательные (потому что можем рассмотреть квадратичную форму с матрицей $X^TX$, тогда $z^TX^TXz=(Xz, Xz)$, т.е. ее сигнатура состоит только из 1 и 0) и при прибавлении $\\lambda E$ для положительных $\\lambda$ получим обратимую матрицу. Если же $\\lambda = 0$, то обратимость следует из линейной независимости столбцов в $X$ (тогда соответствующая матрица Грама $X^TX$ невырождена)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVmoHb9PAn75"
      },
      "source": [
        "**7. [0,25 балла]** При построении линейной модели у вас, как правило, есть также и свободный член, не зависящий от признаков из выборки. Подумайте, почему регуляризовать свободный член — плохая идея?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pz7uZUdjAn76"
      },
      "source": [
        "Ваше обоснование здесь: свободный член нужен, чтобы показать некоторое фиксированное смещение данных. Регуляризация пытается сделать коэффициенты маленькими, что делает свободный член бессмысленным."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gdffe8TCAn76"
      },
      "source": [
        "**8. [0,5 балла]** Пусть теперь $\\text{rk}~X < k$. Всегда ли в этом случае существует решение? Если существует, то является ли оно единственным? Ответ обоснуйте."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P1h46LL8An76"
      },
      "source": [
        "Ваше обоснование здесь: если $\\lambda \\neq 0$, то, как было показано выше, всегда существует единственное решение. Иначе, при $\\lambda = 0$ и условии $\\text{rk}~X < k$ мы не можем пользоваться обратимостью - в этом случае может быть бесконечное число решений."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m7gvthEgAn77"
      },
      "source": [
        "**9. [0,4 балла]** Покажите, что если решений бесконечно много, то среди них обязательно найдутся решения со сколь угодно большими по модулю компонентами вектора $a$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gVPOHJuZAn77"
      },
      "source": [
        "Ваше обоснование здесь: Рассмотрим данное бесконечное множество решений. Предположим обратное - пусть для каждой координаты подходящих векторов $a$ существуют инфинум и супремум модуля. Возьмем координату, у которой они отличаются (иначе, у всех координат они совпадают и множество решений точно не бесконечно). Теперь можно взять вектор $a_1$, чей модуль соответствующей координаты лежит в достаточно малой окрестности инфинума, аналогично берем $a_2$, только для супремума. Тогда $2a_2 - a_1$ тоже решение, причем модуль соответствующей координаты больше супремума - противоречие."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l6hnfV4vAn7-"
      },
      "source": [
        "### Добавление. QR-разложение"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Al3Mv6w8An7-"
      },
      "source": [
        "**QR-разложением** матрицы $A$ (не обязательно квадратной) мы будем называть её представление в виде $A = QR$, где $Q$ — матрица с ортонормированными столбцами, а $R$ - верхнетреугольная матрица.\n",
        "\n",
        "Смысл QR-разложения следующий. Пусть $a_1,\\ldots,a_m$ — столбцы матрицы $A$, $q_1,\\ldots,q_t$ — столбцы матрицы $Q$. Тогда $q_1,\\ldots,q_t$ — это ортонормированный базис в подпространстве, являющемся линейной оболочкой векторов $a_1,\\ldots,a_m$, а в матрице $R$ записаны коэффициенты, с помощью которых $a_i$ выражаются через $q_1,\\ldots,q_t$.\n",
        "\n",
        "Находить QR-разложение заданной матрицы можно разными способами. Мы познакомим Вас не с самым лучшим из них, но по крайней мере с наиболее простым концептуально. Заметим, что ортогональный базис линейной оболочки можно найти с помощью ортогонализации Грама-Шмидта. При этом коэффициенты из матрицы $R$ получаются в качестве побочного продукта этого процесса:\n",
        "\n",
        "```python\n",
        "for j = 1...n:\n",
        "    q_j = a_j\n",
        "    for i = 1,...,j-1:\n",
        "        r_ij = (q_i, a_j)\n",
        "        q_j = q_j - r_ij * q_i\n",
        "    r_jj = |q_j|\n",
        "    if r_jj == 0: # a_j in <a_1,...,a_j-1>\n",
        "        # What would you do in this case?..\n",
        "    q_j = q_j / r_jj\n",
        "```\n",
        "\n",
        "Для нахождения QR-разложения Вы можете использовать библиотечную функцию `scipy.linalg.qr`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UB3uxms8An7_"
      },
      "source": [
        "Поскольку лабораторная про линейную регрессию, не так-то просто замять вопрос о том, какое же отношение QR-разложение имеет к задаче регрессии. Упомянем одно из возможных применений.\n",
        "\n",
        "Допустим, мы нашли QR-разложение матрицы $X$, а именно: $X = QR$. Тогда\n",
        "$$X^TX = (QR)^T(QR) = R^TQ^TQR = R^TR$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2XfyZf8zAn7_"
      },
      "source": [
        "Поскольку в задаче регрессии матрица $X$ обычно полного ранга (то есть её столбцы линейно независимы), матрица $R$ будет квадратной. Благодаря этому нашу обычную формулу для набора регрессионных коэффициентов $\\hat{a}$ можно переписать в следующем виде:\n",
        "\n",
        "$$\\hat{a} = (X^TX)^{-1}X^Ty = (R^TR)^{-1}(QR)^Ty = R^{-1}(R^T)^{-1}R^TQ^Ty = R^{-1}Q^Ty$$\n",
        "\n",
        "Как видите, формула стала проще. Более того, зачастую обращение матрицы $R$ может быть численно более устойчиво, чем обращение матрицы $X^TX$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cafb3a25-898a-4fb7-bca6-d92adc674938",
        "id": "F3U1mH701ynD"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "469901.1239004178\n"
          ]
        }
      ],
      "source": [
        "# Модель для соревнования на Kaggle\n",
        "class ModelRyanGosling:\n",
        "    def __init__(self, X1, X2, y1, y2):\n",
        "        self.enc = ord\n",
        "        X1 = self.prepare(X1)\n",
        "        X2 = self.prepare(X2)\n",
        "        y1 = np.log(y1)\n",
        "        min_MSE, best_lambda = -1, -1\n",
        "        for curr_lambda in np.logspace(-10, 10, num=21):\n",
        "            curr_MSE = mean_squared_error(np.exp(np.clip(X2 @ \n",
        "                                          np.linalg.inv(X1.T @ X1 + curr_lambda * np.eye(X1.shape[1])) @ \n",
        "                                          X1.T @ y1, 0, 10)), y2)\n",
        "            if min_MSE == -1 or curr_MSE < min_MSE:\n",
        "                min_MSE, best_lambda = curr_MSE, curr_lambda\n",
        "        self.a = np.linalg.inv(X1.T @ X1 + best_lambda * \n",
        "                               np.eye(X1.shape[1])) @ X1.T @ y1\n",
        "\n",
        "    def prepare(self, X):\n",
        "        X = np.concatenate((self.enc.transform(X[:, categorical_features]), \n",
        "                            X[:, [0, 5, 6, 7, 8]].astype(float)), axis=1)\n",
        "        X = np.concatenate((X, X[:, [5]] * X[:, [6]] * X[:, [7]]), axis=1)\n",
        "        X = np.concatenate((X, (X[:, [0]] >= 4).astype(np.int_) & (X[:, [1]] >= 1).astype(np.int_) & (X[:, [2]] >= 2).astype(np.int_)), axis=1)\n",
        "        X = np.concatenate((X, (X[:, [0]] <= 4).astype(np.int_) & (X[:, [1]] <= 2).astype(np.int_) & (X[:, [2]] <= 4).astype(np.int_)), axis=1)\n",
        "        X = np.concatenate((X, add_polynomial_features(X[:, [0, 1, 2, 3, 4, 5, 6, 7]].T, 2).T), axis=1)\n",
        "        return X\n",
        "    \n",
        "    def predict(self, X):\n",
        "        X = self.prepare(X)\n",
        "        return np.exp(np.clip(X @ self.a, 0, 10))\n",
        "\n",
        "X_train_new, X_valid, y_train_new, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=3)\n",
        "model = ModelRyanGosling(X_train_new, X_valid, y_train_new, y_valid)\n",
        "print(mean_squared_error(model.predict(X_test), y_test))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "8y17ZmZlNgp6"
      },
      "outputs": [],
      "source": [
        "data_task = np.loadtxt(\"diamonds_test.csv\", delimiter=',', dtype=\"str\")[1:, :]\n",
        "make_submission(model.predict(data_task))"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "homework-practice-02-linregr-Kulev.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
